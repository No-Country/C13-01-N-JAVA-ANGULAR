{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(notifySvc, authSvc, router) {\n    this.notifySvc = notifySvc;\n    this.authSvc = authSvc;\n    this.router = router;\n    this.myForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n      password2: new FormControl('', [Validators.required, Validators.minLength(6)])\n    });\n  }\n  onSubmit() {\n    if (!this.myForm.valid) {\n      this.notifySvc.showError('Verifica tus datos', 'Error al crear la cuenta');\n      return;\n    }\n    const user = {\n      email: this.myForm.value.email ?? '',\n      password: this.myForm.value.password ?? '',\n      role: 'PATIENT'\n    };\n    this.authSvc.register(user).subscribe({\n      next: () => {\n        this.notifySvc.showSuccess('Cuenta creada exitosamente', 'Cuenta creada');\n      },\n      complete: () => {\n        this.router.navigate(['/doctime']);\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","notifySvc","authSvc","router","myForm","email","required","password","minLength","password2","onSubmit","valid","showError","user","value","role","register","subscribe","next","showSuccess","complete","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ANDRES BETANCUR\\C13-01 JAVA-ANGULAR_ NOCOUNTRY\\C13-01-N-JAVA-ANGULAR\\doctime-frontend\\src\\app\\pages\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NotifyService } from 'src/app/services/notify.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { UserRegister } from 'src/app/shared/models/auth.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n})\r\nexport class RegisterComponent {\r\n  public myForm = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n    ]),\r\n    password2: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n    ]),\r\n  });\r\n\r\n  constructor(\r\n    private notifySvc: NotifyService,\r\n    private authSvc: AuthService,\r\n\r\n    private router: Router\r\n  ) {}\r\n\r\n  onSubmit() {\r\n    if (!this.myForm.valid) {\r\n      this.notifySvc.showError(\r\n        'Verifica tus datos',\r\n        'Error al crear la cuenta'\r\n      );\r\n      return;\r\n    }\r\n    const user: UserRegister = {\r\n      email: this.myForm.value.email ?? '',\r\n      password: this.myForm.value.password ?? '',\r\n      role: 'PATIENT',\r\n    };\r\n\r\n    this.authSvc.register(user).subscribe({\r\n      next: () => {\r\n        this.notifySvc.showSuccess(\r\n          'Cuenta creada exitosamente',\r\n          'Cuenta creada'\r\n        );\r\n      },\r\n      complete: () => {\r\n        this.router.navigate(['/doctime']);\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAW5D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAa5BC,YACUC,SAAwB,EACxBC,OAAoB,EAEpBC,MAAc;IAHd,KAAAF,SAAS,GAATA,SAAS;IACT,KAAAC,OAAO,GAAPA,OAAO;IAEP,KAAAC,MAAM,GAANA,MAAM;IAhBT,KAAAC,MAAM,GAAG,IAAIP,SAAS,CAAC;MAC5BQ,KAAK,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACO,KAAK,CAAC,CAAC;MACnEE,QAAQ,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAC5BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,SAAS,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAC7BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,CAAC;EAOC;EAEHE,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACN,MAAM,CAACO,KAAK,EAAE;MACtB,IAAI,CAACV,SAAS,CAACW,SAAS,CACtB,oBAAoB,EACpB,0BAA0B,CAC3B;MACD;;IAEF,MAAMC,IAAI,GAAiB;MACzBR,KAAK,EAAE,IAAI,CAACD,MAAM,CAACU,KAAK,CAACT,KAAK,IAAI,EAAE;MACpCE,QAAQ,EAAE,IAAI,CAACH,MAAM,CAACU,KAAK,CAACP,QAAQ,IAAI,EAAE;MAC1CQ,IAAI,EAAE;KACP;IAED,IAAI,CAACb,OAAO,CAACc,QAAQ,CAACH,IAAI,CAAC,CAACI,SAAS,CAAC;MACpCC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAACjB,SAAS,CAACkB,WAAW,CACxB,4BAA4B,EAC5B,eAAe,CAChB;MACH,CAAC;MACDC,QAAQ,EAAEA,CAAA,KAAK;QACb,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;MACpC;KACD,CAAC;EACJ;CACD;AA9CYtB,iBAAiB,GAAAuB,UAAA,EAL7B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACW1B,iBAAiB,CA8C7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}