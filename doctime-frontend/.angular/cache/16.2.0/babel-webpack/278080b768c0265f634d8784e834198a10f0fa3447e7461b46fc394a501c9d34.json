{"ast":null,"code":"var _class;\nimport { of, tap, map, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n  }\n  get currentUser() {\n    if (!this.id) return undefined;\n    return structuredClone(this.id);\n  }\n  login(user) {\n    return this.http.post(`${this.apiUrl}/login`, user).pipe(tap(res => {\n      console.log(res);\n      this.id = res.id;\n    }), tap(res => {\n      this.token = res.token;\n      localStorage.setItem('token', res.token);\n    }));\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/user/register`, user).pipe(tap(res => {\n      this.id = res.id;\n    }), tap(res => {\n      this.token = res.accessToken;\n      localStorage.setItem('token', res.accessToken);\n    }));\n  }\n  statusAuth() {\n    if (localStorage.getItem('token')) return of(true);\n    const token = localStorage.getItem('token');\n    return this.http.get(`${this.apiUrl}/user/${this.id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).pipe(tap(res => this.id = res.id), map(res => !!res.id), catchError(() => of(false)));\n  }\n  logout() {\n    this.id = undefined;\n    this.token = undefined;\n    localStorage.clear();\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","tap","map","catchError","AuthService","constructor","http","apiUrl","currentUser","id","undefined","structuredClone","login","user","post","pipe","res","console","log","token","localStorage","setItem","register","accessToken","statusAuth","getItem","get","headers","Authorization","logout","clear","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ANDRES BETANCUR\\C13-01 JAVA-ANGULAR_ NOCOUNTRY\\C13-01-N-JAVA-ANGULAR\\doctime-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  ResLogin,\r\n  ResRegister,\r\n  UserLogin,\r\n  UserRegister,\r\n} from '../shared/models/auth.model';\r\nimport { Observable, of, tap, map, catchError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) {}\r\n  private apiUrl = 'http://localhost:8080';\r\n  private id?: number;\r\n  private token?: string;\r\n\r\n  get currentUser() {\r\n    if (!this.id) return undefined;\r\n    return structuredClone(this.id);\r\n  }\r\n\r\n  login(user: UserLogin): Observable<ResLogin> {\r\n    return this.http.post<ResLogin>(`${this.apiUrl}/login`, user).pipe(\r\n      tap((res) => {\r\n        console.log(res);\r\n        this.id = res.id;\r\n      }),\r\n      tap((res) => {\r\n        this.token = res.token;\r\n        localStorage.setItem('token', res.token);\r\n      })\r\n    );\r\n  }\r\n\r\n  register(user: UserRegister): Observable<ResRegister> {\r\n    return this.http\r\n      .post<ResRegister>(`${this.apiUrl}/user/register`, user)\r\n      .pipe(\r\n        tap((res) => {\r\n          this.id = res.id;\r\n        }),\r\n        tap((res) => {\r\n          this.token = res.accessToken;\r\n          localStorage.setItem('token', res.accessToken);\r\n        })\r\n      );\r\n  }\r\n\r\n  statusAuth(): Observable<boolean> {\r\n    if (localStorage.getItem('token')) return of(true);\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    return this.http\r\n      .get<ResLogin>(`${this.apiUrl}/user/${this.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .pipe(\r\n        tap((res) => (this.id = res.id)),\r\n        map((res) => !!res.id),\r\n        catchError(() => of(false))\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    this.id = undefined;\r\n    this.token = undefined;\r\n    localStorage.clear();\r\n  }\r\n}\r\n"],"mappings":";AAQA,SAAqBA,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAK3D,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAChB,KAAAC,MAAM,GAAG,uBAAuB;EADD;EAKvC,IAAIC,WAAWA,CAAA;IACb,IAAI,CAAC,IAAI,CAACC,EAAE,EAAE,OAAOC,SAAS;IAC9B,OAAOC,eAAe,CAAC,IAAI,CAACF,EAAE,CAAC;EACjC;EAEAG,KAAKA,CAACC,IAAe;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAW,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAEM,IAAI,CAAC,CAACE,IAAI,CAChEd,GAAG,CAAEe,GAAG,IAAI;MACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAI,CAACP,EAAE,GAAGO,GAAG,CAACP,EAAE;IAClB,CAAC,CAAC,EACFR,GAAG,CAAEe,GAAG,IAAI;MACV,IAAI,CAACG,KAAK,GAAGH,GAAG,CAACG,KAAK;MACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,GAAG,CAACG,KAAK,CAAC;IAC1C,CAAC,CAAC,CACH;EACH;EAEAG,QAAQA,CAACT,IAAkB;IACzB,OAAO,IAAI,CAACP,IAAI,CACbQ,IAAI,CAAc,GAAG,IAAI,CAACP,MAAM,gBAAgB,EAAEM,IAAI,CAAC,CACvDE,IAAI,CACHd,GAAG,CAAEe,GAAG,IAAI;MACV,IAAI,CAACP,EAAE,GAAGO,GAAG,CAACP,EAAE;IAClB,CAAC,CAAC,EACFR,GAAG,CAAEe,GAAG,IAAI;MACV,IAAI,CAACG,KAAK,GAAGH,GAAG,CAACO,WAAW;MAC5BH,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,GAAG,CAACO,WAAW,CAAC;IAChD,CAAC,CAAC,CACH;EACL;EAEAC,UAAUA,CAAA;IACR,IAAIJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC,EAAE,OAAOzB,EAAE,CAAC,IAAI,CAAC;IAElD,MAAMmB,KAAK,GAAGC,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAO,IAAI,CAACnB,IAAI,CACboB,GAAG,CAAW,GAAG,IAAI,CAACnB,MAAM,SAAS,IAAI,CAACE,EAAE,EAAE,EAAE;MAC/CkB,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUT,KAAK;MAAE;KAC5C,CAAC,CACDJ,IAAI,CACHd,GAAG,CAAEe,GAAG,IAAM,IAAI,CAACP,EAAE,GAAGO,GAAG,CAACP,EAAG,CAAC,EAChCP,GAAG,CAAEc,GAAG,IAAK,CAAC,CAACA,GAAG,CAACP,EAAE,CAAC,EACtBN,UAAU,CAAC,MAAMH,EAAE,CAAC,KAAK,CAAC,CAAC,CAC5B;EACL;EAEA6B,MAAMA,CAAA;IACJ,IAAI,CAACpB,EAAE,GAAGC,SAAS;IACnB,IAAI,CAACS,KAAK,GAAGT,SAAS;IACtBU,YAAY,CAACU,KAAK,EAAE;EACtB;;SA1DW1B,WAAW;;mBAAXA,MAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAX9B,MAAW;EAAA+B,OAAA,EAAX/B,MAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}